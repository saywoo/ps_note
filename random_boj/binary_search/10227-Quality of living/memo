사용한 알고리즘:
이분탐색, 누적합

2차원 배열에서 나올 수 있는 값은 1~n*m이므로 
이만큼을 이분탐색하게 되면 최적화 문제를 결정문제로 바꿀수 있게 된다.

이렇게 이분탐색의 mid값을 정해놓은 상태에서 
mid보다 큰 값은 1로,
mid랑 같은 값은 0으로,
mid보다 작은 값은 -1로 해서 
2차원 배열에서의 누적합 배열을 저장해둔다.

그리고 모든 경우의 직사각형을 다 만들어보면, 
그 직사각형의 값이 0이면 mid의 값이 그 직사각형의 중앙값이 된다.
그렇게 다 구해보았을때 직사각형의 값이 음수인 직사각형이 있다면 더 작은 중앙값이 있으므로 high = mid - 1를 해주고
0이 있고 전부 양수이면 ans 값에 mid값을 저장해두고 low = mid + 1을 하는 식으로 이분탐색을 하면된다.